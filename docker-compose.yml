version: '3.7'
x-images: #Â Only to create template
  django: &django
    <<: [ *env ]
    environment:
      GUNICORN_WORKERS: 8
      GUNICORN_WORKER_CLASS: sync
    tty: true
    # latest image is only used in prod (without dev & test tools)
    build:
      context: "."
      args:
        PY_VER: "${DJANGO_PY_VER:-3.6}"
    build:
      context: .
    depends_on:
    - db
    - redis
    - setup-postgres
    working_dir: /code/src
    command:
    - sh
    - '-c'
    - >-
      :
      && dockerize -wait http://setup-postgres -timeout $${POSTGRES_STARTUP_TIMEOUT:-120s}
      && /bin/bash /code/init/init.sh
    volumes:
      - ./crontab:/etc/cron.d/django
      - mediafiles:/code/public/media
      - statics:/code/public/static
      - logs:/logs/
services:
  mailcatcher:
    image: corpusops/mailhog
    hostname: mailcatcher
    volumes: ["mails:/mails"]
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /mails
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
      MH_UI_WEB_PATH: /mailcatcher
      MH_AUTH_FILE: /home/mailhog/pw
    user: root
    entrypoint:
      - sh
      - '-c'
      - >
        chown mailhog /mails
        && pw=$$(MH_AUTH_FILE="" MailHog bcrypt "$${MAILCATCHER_PASSWORD:-mailcatcher}")
        && echo "$${MAILCATCHER_USER:-mailcatcher}:$$pw" > $$MH_AUTH_FILE
        && su mailhog -p -c MailHog
  redis:
    image: "corpusops/redis:4.0-alpine"
    hostname: redis
    volumes:
      - 'redis:/data'
  db:
    image: "corpusops/pgrouting:10-2.5-2.6"
    volumes:
      - postgresql:/var/lib/postgresql/data
  nginx:
    restart: always
    image: "corpusops/nginx:1.14-alpine"
    depends_on:
      - django
      - elasticsearch
    volumes:
      - ./prod/etc/nginx/vhost.conf.template:/etc/nginx/conf.d/default.conf.template
      - mediafiles:/public/media/:ro
      - statics:/public/static/
      - logs:/logs/
      - cache:/cache/
    command: >
      /bin/sh -c "
      CONF_PREFIX=FRONT_ confenvsubst.sh /etc/nginx/conf.d/default.conf.template
      && exec /bin/supervisord.sh"
    environment:
    - SUPERVISORD_CONFIGS=/etc/supervisor.d/cron /etc/supervisor.d/nginx /etc/supervisor.d/rsyslog
  django:
    <<: [ *django ]
  cron:
    <<: [ *django ]
    command:
    - sh
    - '-c'
    - >-
      :
      && dockerize -wait http://setup-postgres -timeout $${POSTGRES_STARTUP_TIMEOUT:-120s}
      && /bin/bash /code/init/cron.sh
    depends_on:
      - django
  celery:
    <<: [ *django ]
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-project.settings.dev}
    command:
    - sh
    - '-c'
    - >-
      :
      && dockerize -wait http://setup-postgres -timeout $${POSTGRES_STARTUP_TIMEOUT:-120s}
      && /code/venv/bin/celery worker -A django_geosource -l info --autoscale 10,3
    depends_on:
      - django
  elasticsearch:
    hostname: elasticsearch
    image: elasticsearch:6.4.3
    environment:
      ES_JAVA_OPTS: -Xms4g -Xmx4g
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - ./elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - elasticsearch:/usr/share/elasticsearch/data/
  setup-postgres:
    <<: [ *env ]
    image: corpusops/pgrouting:10-2.5-2.6
    depends_on:
    - db
    entrypoint:
    - /bin/sh
    - '-c'
    - |-
      set -ex
      POSTGRES_STARTUP_TIMEOUT=$${POSTGRES_STARTUP_TIMEOUT:-120s}
      POSTGRES_HOST=$${POSTGRES_HOST:-db}
      POSTGRES_PORT=$${POSTGRES_PORT:-5432}
      flag=/started_$$(echo $$POSTGRES_DB|sed -re "s![/:]!__!g")
      if [ -e "$$flag" ];then rm -f "$$flag";fi
      echo "Try connection to pgsql: $$POSTGRES_DB & wait for db init" >&2 \
      && ( while true;do if ( \
        echo "select 1 from spatial_ref_sys limit 1;select postgis_version();"\
        | psql -v ON_ERROR_STOP=1 \
          "postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@$$POSTGRES_HOST:$$POSTGRES_PORT/$$POSTGRES_DB"\
      );then touch $$flag && break;fi;done )&
      set -x \
      && dockerize -wait file://$$flag -timeout $${POSTGRES_STARTUP_TIMEOUT:-120s} \
      && while true;do printf "HTTP/1.1 200 OK\n\nstarted"| ( nc -l -p 80 || /bin/true);done
volumes:
  postgresql:
  redis:
  mediafiles:
  statics:
    name: "visu-back-statics"
    external: false
  logs:
  elasticsearch:
  mails:
  cache:
